// ----------
//    !!!

// OPAL PARTY
// http://opal-coast.rook-design.com/stylus/core/type.html

//    !!!
// ----------


// ----------
// Core typography

$p          : 18;
$lh         : $p*1.55;
$gt         : $p*1.7;

$pwidth     : 38;


// ----------
// Modular scale

$double-octave    : 4;
$major-twelfth    : 3;
$major-eleventh   : (8/3);
$major-tenth      : (5/2);
$octave           : 2;
$major-seventh    : (15/8);
$minor-seventh    : (16/9);
$major-sixth      : (5/3);
$golden           : 1.618034;
$minor-sixth      : (8/5);
$perfect-fifth    : (3/2);
$augmented-fourth : math(2, 'sqrt');
$perfect-fourth   : (4/3);
$major-third      : (5/4);
$minor-third      : (6/5);
$major-second     : (9/8);
$minor-second     : (16/15);

$mod        : $perfect-fourth;


// ----------
// Modular scale: relative

@function ms($step, $scale: $mod) {
  $result: $scale;
  
  @if $step > 1 {
    $step: $step - 1;
    
    @for $i from 1 through $step {
      $result: $result * $scale;
    }
  }
  
  @else if $step < 0 {
    $step: $step + 1;
    
    @for $i from 1 through $step {
      $result: $result / $scale;
    }
  }
  
  @else if $step == 0 {
    $result: 1
  }
  
  @return $result;
}
  

// ----------
// Modular scale: Pixel value

@function mp($step, $scale: $mod) {
  $result: $scale;

  @if $step > 1 {
    $step: $step - 1;

    @for $i from 1 through $step {
      $result: $result * $scale;
    }
  }

  @else if $step < 0 {
    $step: $step + 1;

    @for $i from 1 through $step {
      $result: $result / $scale;
    }
  }

  @else if $step == 0 {
    $result: 1
  }

  @return $result * $p;
}

// ----------
// Font-size & line-height

@mixin fs($px, $plh: $lh) {
  font-size: ($px/$p)*1rem;

  @if $plh != $lh {
    line-height: ($plh / $px);
  }

  @else {
    $flh: $lh;

    @if $flh/$px < 1 {
      $flh: $lh*1.5;
    }

    @if $flh/$px < 1 {
      $flh: $lh*2;
    }

    @if $flh/$px < 1 {
      $flh: $lh*2.5;
    }

    @if $flh/$px < 1 {
      $flh: $lh*3;
    }

    line-height: ($flh / $px);
  }
}

// ----------
// Padding & Margin

$let        : $lh/$p;
$gut        : $gt/$p;

@function let($n, $unit: 1rem) {
  @return round($let * $n * 10000) / 10000 * $unit;
}

@function gut($n, $unit: 1rem) {
  @return round($gut * $n * 10000) / 10000 * $unit;
}

@mixin mgn($mt,$mr,$mb: $mt,$ml: $mr) {
  @if $mt == $mb and $mr == $ml {
    @if $mr == auto {
      margin: let($mt) auto
    }

    @else {
      margin: let($mt) gut($mr)
    }
  }

  @else if $mt != $mb and $mr == $ml {
    @if $mr == auto {
      margin: let($mt) auto let($mb)
    }

    @else {
      margin: let($mt) gut($mr) let($mb)
    }
  }

  @else {
    margin: let($mt) gut($mr) let($mb) gut($ml)
  }
}

@mixin pad($pt,$pr,$pb: $pt,$pl: $pr) {
  @if $pb == $pt and $pr == $pl {
    padding: let($pt) gut($pr)
  }

  @else if $pb != $pt and $pr == $pl {
    padding: let($pt) gut($pr) let($pb)
  }

  @else {
    padding: let($pt) gut($pr) let($pb) gut($pl)
  }
}
